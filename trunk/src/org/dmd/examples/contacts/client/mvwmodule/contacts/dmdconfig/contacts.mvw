Module
moduleName      contacts
dependsOnSchema contacts
dependsOnModule	mvwcomms
dependsOnModule gxt
dependsOnModule gxtforms
dependsOnModule	login
genPackage      org.dmd.examples.contacts.client.mvwmodule.contacts
description     The contacts module defines components that let us manage a set of contacts.
 In this version of the application, the contacts module has a dependency on the
 login module because it will determine whether or not we're logged in when
 the ListContactsActivity starts and, if not, will transition to the LoginPlace.

///////////////////////////////////////////////////////////////////////////////
// RUN CONTEXT ITEMS

RunContextItem
itemName			images
useClass     		org.dmd.examples.contacts.client.mvwmodule.contacts.resources.Images
construction 		GWT.create(Images.class)
description			Image resources for the contact application. If you want to
 access these images, you would simply specify:<br/>
 <pre>
 usesRunContextItem	images
 </pre>
 in the component where you wanted to access them.

EnumMapping
mappingName			ContactTypeEnumMapping
enumName			ContactTypeEnum
unsetValue			UNKNOWN
//skipEnumValue	some value you want to skip
useNameAsLabel		true
mappingGenerator	GXTEnumGenerator
description			Creates a mapping for the type of a Contact.


///////////////////////////////////////////////////////////////////////////////
// EVENTS

Event
eventName       AddContactEvent
description     Fired when the Add button is clicked.
 
Event
eventName       DeleteContactsEvent
argVector		(List<ContactGXT> deletedContacts)
importThis		java.util.List
importThis		org.dmd.examples.contacts.client.generated.gxt.ContactGXT
description     Indicates one or more contacts to be deleted. Events can be fired by
 Views in different ways e.g. local, broadcast or broadcastOnly. If an Event is 
 only ever fired locally, no GWT Event will be created for it. For either of the 
 broadcast situations, a GWT Event will be generated. A broadcast event is sent first
 to the presenter and then on the event bus. A broadcast only event is only sent
 on the event bus.
 
Event
eventName       ContactUpdatedEvent
argVector		(ContactDMO modrec)
importThis		org.dmd.examples.contacts.shared.generated.dmo.ContactDMO
description		Fired when a contact has its information alterred. The modifications
 will have been recorded in the modrec. In the case of a newly added contact,
 the Contact will not have an object name; this must be generated on the server.

Event
eventName       NewContactEvent
argVector		(ContactDMO contact)
importThis		org.dmd.examples.contacts.shared.generated.dmo.ContactDMO
description		Fired when a new contact has been created by the user and they've
 hit the Create button.

Event
eventName       EditContactCancelledEvent
description     Fired when the user hits cancel when viewing or adding Contact. We
 revert back to the ContactListView.

Event
eventName       EditContactCompleteEvent
argVector		(DmcObjectName name)
importThis		org.dmd.dmc.DmcObjectName
description     Fired when the user's changes have been successfully applied to a contact.

Event
eventName       AddContactCompleteEvent
argVector		(DmcObjectName name)
importThis		org.dmd.dmc.DmcObjectName
description     Fired when the user has successfully created a new contact.

Event
eventName       EditContactEvent
argVector		(ContactDMO contact)
importThis		org.dmd.examples.contacts.shared.generated.dmo.ContactDMO
description     Fired when a single Contact is clicked by the user. When this is
 done, we display the EditContactView.


///////////////////////////////////////////////////////////////////////////////
 
Place
placeName			ListContactsPlace
placePrefix			list
runsActivity		ListContactsActivity
description			The place where we list the available contacts. The URL
 is #list:.

Activity
activityName		ListContactsActivity
subpackage			listing
codeSplit			true
abstractActivity	true
//usesController		ContactAppController
usesRunContextItem	placeController	
usesRunContextItem	commsController
usesRunContextItem	ContactListPresenterRCI
description			The ListContactsActivity determines whether or not we're logged
 in. If not, it will goto the LoginPlace. If so, it will display the ContactListView
 that has been created by the ContactListPresenter.

View
viewName        	ContactListView
subpackage			listing
//codeSplit			true
broadcastOnly		AddContactEvent
broadcastOnly		EditContactEvent
local				DeleteContactsEvent
broadcastOnly		LogoutEvent
viewMethod			void displayContacts(HashMap<DmcObjectName, GxtWrapper> contacts) 
 This is called when the presenter has the contacts available.
viewMethod			void deleteContact(ContactGXT contact)
 This is called when the presenter receives a deletion event for a contact.
viewMethod			void addContact(ContactGXT contact)
  This is called when a new contact has been successfully created on the server.
viewMethod			void resetToEmpty()
 The presenter will call this when it wants to wipe the current set of data being displayed.
viewMethod			void displayFeedback(String info)
 This method will display the specified feedback message.
viewMethod			void displayError(String info)
 This message will display an error indication.
viewImport			java.util.List
viewImport			org.dmd.examples.contacts.client.generated.gxt.ContactGXT
viewImport			java.util.HashMap
viewImport			org.dmd.dmc.DmcObjectName
viewImport			org.dmd.mvw.client.gxt.dmw.GxtWrapper
presenterMethod		void exampleMethod(Date date)
 This is just an example of how to define a method for your presenter. You can stick with the
 event paradigm if you wish, but if you need to get information back from the presenter, you'll
 need to use something like this. Make sure that you provide a presenterImport spec for any 
 required imports.
presenterImport		java.util.Date	
usesRunContextItem	images
description			The ContactListView displays a list of Contacts and shows the first
 and last names and the email address of the contact.
 
Presenter
presenterName			ContactListPresenter
subpackage				listing
singleton				true
codeSplit				true
managesView				ContactListView
instantiatesView		ContactListView
usesRunContextItem		gxtCache
usesRunContextItem		placeController
sendsRequest			GetRequest getContact DMPERRORS EVENTS
sendsRequest			DeleteRequest deleteContact
handlesEvent			CommsSessionReady
handlesEvent			LogoutCompleteEvent
handlesEvent			EditContactCompleteEvent
handlesEvent			AddContactCompleteEvent
//instantiatesPresenter	EditContactPresenter
//instantiatesView		EditContactView
description				This presenter takes care of retrieving the summary information
 for our Contacts and populates the ContactListView. It takes care of deletion
 requests from the view and listens for Contact create events and updates the 
 view accordingly.
 <p/>
 This presenter is created as a singleton so that it doesn't have to be recreated
 each time we transition from the ListContactsActivity to the EditContactActivity and
 back again.

///////////////////////////////////////////////////////////////////////////////
// EDIT CONTACT

Place
placeName			EditPlace
placePrefix			edit
runsActivity		EditContactActivity
description			The place where we edit or add a Contact.

Activity
activityName		EditContactActivity
subpackage			edit
codeSplit			true
abstractActivity	true
sendsRequest		GetRequest getContact
//sendsGetRequest		getContact CENTRALERRORS
sendsRequest		SetRequest setContact Contact
sendsRequest		CreateRequest createContact Contact
//sendsSetRequest		setContact CENTRALERRORS
managesView			EditContactView
instantiatesView	EditContactView
usesRunContextItem	placeController	
usesRunContextItem	commsController
firesEvent			EditContactCancelledEvent
firesEvent			EditContactCompleteEvent
firesEvent			AddContactCompleteEvent
description			The EditContactActivity will determine if we're logged in.
 If not, it will have us goto the LoginPlace. If so, it will retrieve the Contact
 details if a Contact uuid was specified as part of the edit place URL. If not,
 we are assumed to be creating a new Contact. If the user hits OK, we send a Set
 or Create request to the server and transition back to the ListContactsPlace.
 If the user hits cancel, we go to the ListContactsPlace.

View
viewName			EditContactView
subpackage			edit
codeSplit			true
local				ContactUpdatedEvent
local				NewContactEvent
broadcastOnly		EditContactCancelledEvent
viewMethod			void setContact(ContactDMO contact)
viewImport			org.dmd.examples.contacts.shared.generated.dmo.ContactDMO
presenterMethod		void cancelEdit() Called when the user clicks the Cancel button.
description			The EditContactView displays a single Contact. 
 If the Save button is clicked, a ContactUpdatedEvent is sent with the recorded
 modifications. If cancel is clicked, we revert to the ContactListView.
 
FormBindingDefinition
bindingName			ContactBinding
editObject			Contact
editField			firstName GXTTextField MUST : First name
editField			lastName GXTTextField MUST : Last name
//editField				someRelation GXTTextField MUST	: Some relation
description			The ContactBinding defines a binding between the attributes of
 a Contact object and a set field editors that can be added to a form. The exact
 implementation of the editors is completely flexible; you may use whatever
 GWT mechanism/toolkits you want. The only caveate is that the editors must
 conform to the org.dmd.dmc.presentation.DmcPresentationIF interface.

//Presenter
//presenterName			EditContactPresenter
//managesView			EditContactView
//instantiatesView		EditContactView
//sendsGetRequest		getContact CENTRALERRORS
//sendsSetRequest		setContact CENTRALERRORS
//description			The EditContactPresenter retrieves a complete Contact or creates
// a new Contact and populates the EditContactView. If the user hits the Save button,
// we send a Set or Create request to the server depending on the circumstances.
